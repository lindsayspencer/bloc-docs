Stacks and Queues

Exercises

1. What is the main difference between a stack and a queue?

A stack arranges elements in LIFO priority. It puts new elements at the top of the stack, and retrieves data from the top of the stack - the last ones to be entered. A queue instead arranges elements in FIFO priority. It puts new elements at the back of the queue, but takes prioritizes elements at the front of the queue - the first ones entered- first.

2. What are the similarities between stacks and queues?

Stacks and queues both handle data retrieval and manipulation.

3. Imagine you are an engineer tasked with implementing the UNDO and REDO options in a word processor such as Microsoft Word. Which data structure would you use for each option and why?

I would use a stack data structure for both UNDO and REDO because both need to call the latest event data.


Programming Questions

1. Given a string, reverse it using a stack.

// pseudocode

FUNCTION REVERSE(string)
  INIT stack
  SET splitString to string.split
  FOR each character in string
    PUSH character to stack
  END FOR
  INIT reversed
  FOR each character in stack, starting with the last, UNTIL 0
    PUSH character to reversed
  END FOR
  RETURN JOINED reversed
END FUNCTION


// JS function data structure

function reverse(string){
  let stack = [];
  let splitString = string.split("");
  for(var character = 0; character < splitString.length; character++){
    stack.push(splitString[character]);
  }
  let reversed = [];
  for(var character = stack.length - 1; character >= 0; character--){
    reversed.push(stack[character]);
  }
  return reversed.join("");
}


// JS class data structure

class StringStack {
  constructor(){
    this.characters = [];
  }
  push(string){
    let splitString = string.split("");
    for(var x = 0; x < splitString.length; x++){
      this.characters.push(splitString[x]);
    }
  }
  call(){
    if(this.characters.length === 0){
      return "Error: empty stack";
    }
    return this.characters[this.characters.length - 1];
  }
  pop(){
    if(this.characters.length === 0){
      return "Error: empty stack";
    } else {
      this.characters.pop();
    }
  }
  printStack(){
    return this.characters.join("");
  }
  printReverse(){
    let reversed = [];
    for(var x = this.characters.length - 1; x >= 0; x--){
      reversed.push(this.characters[x]);
    }
    return reversed.join("");
    }
}


2. Implement the pop method of a stack using one queue. Make a FIFO data structure mirror the functionality of a LIFO data structure. Since the internal list is not the same as defined in the checkpoint, it may help to rewrite the pseudocode first.

FUNCTION dequeue
  SET temp to the last element
  REMOVE LAST element of list from list
  RETURN temp
END FUNCTION

class QueuedRequests {
  constructor(){
    this.requests = [];
  }
  dequeue(){
    if(this.requests.length === 0){
      return "Error: empty queue";
    }
    let temp = this.requests[this.requests.length - 1];
    this.requests.splice(this.requests.length - 1 , 1);
    return temp;
  }
  enqueue(request){
    this.requests.push(request);
  }
  call(){
    if(this.requests.length === 0){
      return "Error: empty queue";
    }
    return this.requests[0];
  }
  printList(){
    return this.requests;
  }
}


...

To delete an item...


1. Implement the enqueue and dequeue methods defined in the checkpoint inside your own Queue class.

FUNCTION enqueue(element)
  APPEND element to the end of the list
END FUNCTION

FUNCTION dequeue
  SET temp to the first element
  REMOVE FIRST element of list from list
  RETURN temp
END FUNCTION

class Queue {
  constructor(){
    this.items = [];
  }
  enqueue(item){
    this.items.push(item);
  }
  dequeue(){
    if(this.items.length === 0){
      return "Error: empty list";
    }
    let temp = this.items[0];
    this.items.splice(0 , 1);
    return temp;
  }
}
